// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CreatePortfolioItemData, CreatePortfolioItemResponses, CreatePortfolioItemErrors, LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, MeData, MeResponses, RefreshData, RefreshResponses, RefreshErrors, RegisterData, RegisterResponses, ContactData, ContactResponses, ContactErrors, GetInfoAboutMeData, GetInfoAboutMeResponses, GetPortfolioData, GetPortfolioResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const createPortfolioItem = <ThrowOnError extends boolean = false>(options: Options<CreatePortfolioItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePortfolioItemResponses, CreatePortfolioItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/portfolio/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

export const me = <ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};

export const refresh = <ThrowOnError extends boolean = false>(options?: Options<RefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshResponses, RefreshErrors, ThrowOnError>({
        url: '/api/auth/refresh',
        ...options
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, unknown, ThrowOnError>({
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const contact = <ThrowOnError extends boolean = false>(options: Options<ContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContactResponses, ContactErrors, ThrowOnError>({
        url: '/api/contact/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getInfoAboutMe = <ThrowOnError extends boolean = false>(options?: Options<GetInfoAboutMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInfoAboutMeResponses, unknown, ThrowOnError>({
        url: '/api/public/about/',
        ...options
    });
};

export const getPortfolio = <ThrowOnError extends boolean = false>(options?: Options<GetPortfolioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPortfolioResponses, unknown, ThrowOnError>({
        url: '/api/public/portfolio/',
        ...options
    });
};